Java Day36
Topic: Inheritance Intro
package name: day36_Inheritance
warmup tasks:
    1. Create a class named Student:
        - private variables: name, age, gender, grade, schoolName
        - Encapsulate all the filed (at least encapsulate two fields manually)
        - requirements:
            1. age should not be set less than 5 or greater than 90
            2. gender should not be set to any character other than: 'M' and 'F'
            3. grade should not be set to any characters other than: 'A', 'B', 'C', 'D', and 'F'
        - Add a constructor that can set all teh fields when the object is created
            (requirements of filed in the above must be applied)
        - Methods:
            study()
            toString()

Encapsulation:  hiding the filed by giving private access modifiers
                use getter/setter to read/write the private data
                (to read the data, we need getter. in the method we add conditions, restrict the user)
                (getters and setters should be accessible all the time, should be public)
                (they only set and get instance variables)

                Getter (Read Only): public instance method
                    - Return type is not void
                    - Return type must match with private instance variable's data type
                    - Does not pass any parameter
                    - Returns the private instance variable's value

                Setter (Write Only): public instance method
                    - Return type is void
                    - Passes a parameter
                    - Parameter's data type must match with private instance variable's data type
                    - reassigns the private instance variable to given argument

                use the data means:
                    1. read (returns the values that it reads)
                    2. write (updates the value of the variable)


Inheritance Topic:
        Is A relation
        extends keyword
        super keyword & constructor
        Types of Inheritance
        Is A relation vs Has A relation
        Method Overriding

Today:
        Is A relation
        extends keyword

        is-a relation: inheriting features from an other class
        - why we need?  - efficient coding, less code, using general methods and variables
                        - create one time, use multiple times
                        - less memory usage
                        - increase re-usability
                        - easy to maintain (only in one place fixing the issues)
                        - easy to manage and organize

        Animal - Cat : Cat is a Animal
        Animal - Dog : Dog is a Animal
        Animal - Fish : Fish is a Animal

        public class Dog extends Animal{
                    .....
        }

        - Animal is parent class (super-class)
        - Dog is child class (sub-class)

        - Parent Class: gives the features
        - Child Class: inherits the features from parent class

        - child class can also has its own features that are not present in parent class (methods and variables)
        - parent class should only contain common features
        - child class must inherit all features from parent class
        - only all accessible variables & methods are inherited
        - private methods and variables can not be inherited
        - constructors can not be inherited, because it has the same name with the class it belongs
        - child class must call parent's constructor




Tomorrow:
        super keyword & constructor
        Types of Inheritance

Next Thursday:
        Is A relation vs Has A relation
        Method Overriding

Next Friday:
        implement both Inheritance and Encapsulation

Task:
            Animal: name, breed, gender, size, age, color
                    setInfo(), eat(), drink(), move(), sleep(), toString()

            Dog extends Animal:
                bark()
            Cat extends Animal:
                scratch()
            Tiger extends Animal:
                roar()
            Fish extends Animal:
                swim()
...
import vs extends:
        import: borrowing
        extends: owning
        inherit ->pass it through
        import -> let using

lunch task:
    Employee:
        name, gender, age, jobTitle, id, salary, companyName
        setInfo(), work(), toString()
        Tester
        Developer
        Driver
