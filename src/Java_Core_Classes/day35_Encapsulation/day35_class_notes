Java Day35
Topic: OOP Encapsulation
package name: day35_Encapsulation
warmup tasks:
1. Create a class named Person:
        Variables:
            name, age, gender, language, planet, isHuman, hasNose, numberOfWings, numberOfHead
        Add a constructor to initialize all the fields
        Add a static block to initialize all the statics

        Methods:
            printPlanetName()
            eat(String food)
            drink(String drink)
            toString()
(this keyword is used to assign the instance variables.)
(always declare static variables first, then in static block initialize them)
(ExcelSheet = this sort of variable can be defined for test data, everytime it has static variables to declare and initialize)
(static variables are called through the class name. Once the class is called, first static block is executed)
(if there is no instance variables to use, define method as static)
(instance method can access static variables. they need an object to call. it uses more memory. so if we have only
static variables, it is better to define static methods)
(object come from the class, so it share everything that class has)
(class does not come from object)
(if method needs instance, it should be instance method)
(to String() method is instance method but it can receive static variables)


2. create a class named CybertekStudent
        Variables: name, gender, age, batchNumber, groupNumber, schoolName, fieldOfStudy, programmingLanguage, secretCode

        Add a constructor to initialize all the fields
        Add a static block to initialize all the statics

        methods:
            printSchoolName();
            printSecretCode();
            attendClass():
            study()
            toString()
Task:
1. Create an Employee Class:
private variables:
name, gender, age, salary
Encapsulate all the private fields
1. Name can not be empty
2. gender can not anything other than
female or male
3. age can not be less than 16, and
greater than 90
4. salary can not be zero or negative
2. Create a class named Circle
privtae variables:
radius
public variable:
pi
 Encapsulate all the private fields
 1. radius of the circle can
not be zero or negative
Add a constructor that can set the raidus of
coircle when circle object is created
Methods:
calcArea()
calcPerimeter()
toString()