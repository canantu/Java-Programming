Java Day43
Topic:  Abstraction Intro
        Abstract Method
        Abstract class

package name: day43_Abstraction

Exception:
    checked & unchecked
    try & catch
    throws
    throw

throw new RuntimeException("Exception Message");


OOP Encapsulation: hiding the data

OOP Inheritance: creating IS A relation between classes (parent/child  or super/sub)

method overriding: giving different implementation to the method

Abstraction Topics:
        Abstract Method
        Abstract Class
        Interface


        abstract class vs class
        abstract class vs interface

Abstraction: focusing on the essentials without worrying about the small details(implementations) of the method
                   - abstract classes are meant to be parent class, not to create object
                   - abstract classes can not be instantiated
                   - they are incomplete, not concrete classes
---------------------------

** abstract classes can be inherited by another abstract class

        abstract class Device{      // can not be instantiated since it is abstract
            turnOff();
        }

        abstract class Phone extends Device{      // can not be instantiated since it is abstract
            call();
        }

        class Iphone extends Phone{    // inherits 2 abstract methods
        }

        class Samsung extends Phone{         // inherits 2 abstract methods
        }

***  Parent classes are not meant to create an object
---------------------------------------------

Car Task:
        abstract Car:
            make, model, color, year, price....
            start();
            stop();

        Honda extends Car:
            start(): twist the key to ignition

        Audi extends Car:
            start(): push the start button

        Tesla extends Car:
            start(): Say "Start"

---------------------------------------------------

Employee task:
        abstract Person:
            name, age, gender(final)
            eat();
            sleep();

        abstract Employee extends Person:
            id(final), jobTitle, salary...
            work();

        Tester
            work(): testing

        Developer
            work(): developing

        Teacher
            work(): teaching

        Driver
            work(): driving
................

Shape task:
        Shape:
            name
            Encapsulate the fields
            Add constructor to set the fields
            area()
            perimeter()
            toString(): name, area, perimeter

        Create the following subclasses of Shape and add the additional features that are needed:

        Rectangle:
            area(): w * l
            perimeter(): 2 * (w+l)

        Square:
            area(): s * s
            perimeter: 4 * s

        Circle:
            area(): r * r * pi
            perimeter(): 2 * r * pi


Animal task:
    abstract Animal
        eat();

    child classes:

        Dog
        Cat
        Tiger
        Eagle